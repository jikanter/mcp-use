name: Release

on:
  workflow_run:
    workflows: ["Tests"]
    branches: [main]
    types:
      - completed

# Required for PyPI trusted publishing
permissions:
  id-token: write
  contents: write  # Required for creating tags and releases

jobs:
  check-version-and-publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel tomli

      - name: Check for version bump
        id: check-version
        run: |
          # Extract current version directly from pyproject.toml
          # This is more reliable than using importlib.metadata
          CURRENT_VERSION=$(python -c "
          import tomli
          with open('pyproject.toml', 'rb') as f:
              data = tomli.load(f)
          print(data['project']['version'])
                    ")

          echo "Current version: $CURRENT_VERSION"

          # Check if this version already has a tag
          if git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
            echo "Version $CURRENT_VERSION already has a tag. Skipping release."
            echo "is_new_version=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected: $CURRENT_VERSION"
            echo "is_new_version=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Build package
        if: steps.check-version.outputs.is_new_version == 'true'
        run: |
          python -m build

      - name: Find and Publish Draft Release
        if: steps.check-version.outputs.is_new_version == 'true'
        id: publish_release
        run: |
          # Find the draft release for this version
          RELEASE_ID=$(gh release list --json id,name,isDraft --jq '.[] | select(.name | contains("v${{ steps.check-version.outputs.new_version }}")) | select(.isDraft == true) | .id')

          if [ -n "$RELEASE_ID" ]; then
            echo "Found draft release with ID: $RELEASE_ID"
            # Edit the existing draft to make it published
            gh release edit "v${{ steps.check-version.outputs.new_version }}" --draft=false
            echo "Published existing draft release"
          else
            echo "No draft release found, creating new release"
            # Fallback: create new release (though this shouldn't happen if release-drafter is working)
            gh release create "v${{ steps.check-version.outputs.new_version }}" \
              --title "Release v${{ steps.check-version.outputs.new_version }}" \
              --generate-notes
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        if: steps.check-version.outputs.is_new_version == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
